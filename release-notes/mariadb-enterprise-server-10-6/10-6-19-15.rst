.. Copyright (C) 2024 MariaDB plc. All rights reserved.
   ID: F5S1HG80SXX0F3F

.. page::
   :silos: columnstore, server

.. eval::

   rel = Namespace(
      prod_abbr = 'es',
      ver = "10.6.19-15",
      date = "2024-09-09",
      maturity = "GA",
      )

.. The following include adds a meta:: :description: text, adds the slug,
   adds the H1 heading, and adds various <%FOO%> variables:

.. include:: ~/rn-h1.inc

MariaDB Enterprise Server <%VER%> is a maintenance release of «slug»«ent-mariadb-enterprise-server»«MariaDB Enterprise Server» 10.6.

<%PROD_VER_DATE%>

<%CVE_LIST%>

## Backports
---

* Starting with MariaDB Enterprise Server 10.6.19-15, the space occupied by freed pages within the InnoDB system tablespace can be reclaimed by adding an :autoshrink attribute to innodb_data_file_path, like: «ext-issue»«MENT-1304»

  .. code-block:: ini

      [mariadb]
      ...
      innodb_data_file_path=ibdata1:12M;ibdata2:50M:autoextend:autoshrink

  This allows the system tablespace to be truncated after the last allocated page within it, all the way to the specified minimum size (here: 12MiB).

  In older release series InnoDB data files never shrink in size during normal operation. One could shrink .ibd files by rebuilding tables with OPTIMIZE TABLE, or the undo tablespace files by ``SET GLOBAL innodb_undo_log_truncate=ON``

* The function CONV() , which converts a number between numeric base systems, now supports conversions up to base 62. This allows conversions to encodings to capital letters A-Z, lower case letters a-z, and numbers 0-9.  The old limit was 36, not including lower case letters. «ext-issue»«MENT-2031»

    Example:

    .. code-block::

      SELECT CONV(61,10,36);
      +----------------+
      | CONV(61,10,36) |
      +----------------+
      | 1P             |
      +----------------+
      SELECT CONV(61,10,62);
      +----------------+
      | CONV(61,10,62) |
      +----------------+
      | z              |
      +----------------+

* The JSON functions JSON_ARRAY_INTERSECT, JSON_OBJECT_TO ARRAY, and JSON_FILTER_KEYS have been backported from later MariaDB Community Server Release Series to enhance the JSON function coverage in this MariaDB Enterprise Server release series. «ext-issue»«MENT-1897»

  * The new JSON function JSON_ARRAY_INTERSECT(<array1>, <array2>) is used to find the intersection between two JSON arrays.

    Example:

    .. code-block::

      SET @array1= '[1,2,3]';
      SET @array2= '[1,2,4]';
      SELECT json_array_intersect(@array1, @array2) as result;
      +--------+
      | result |
      +--------+
      | [1, 2] |
      +--------+
      SET @json1= '[[1,2,3],[4,5,6],[1,1,1]]';
      SET @json2= '[[1,2,3],[4,5,6],[1,3,2]]';
      SELECT json_array_intersect(@json1, @json2) as result;
      +------------------------+
      | result                 |
      +------------------------+
      | [[1, 2, 3], [4, 5, 6]] |
      +------------------------+

  * The new JSON function JSON_OBJECT_TO_ARRAY(<json_doc>) is used to convert all JSON objects found in a JSON document to JSON arrays where each item in the outer array represents a single key-value pair from the object.

    Example:

    .. code-block::

      SET @json1= '{ "a" : [1,2,3] , "b": {"key1": "val1", "key2": {"key3": "val3"}} }';
      SELECT JSON_OBJECT_TO_ARRAY(@json1) as result;
      +-----------------------------------------------------------------------+
      | result                                                                |
      +-----------------------------------------------------------------------+
      | [["a", [1, 2, 3]], ["b", {"key1": "val1", "key2": {"key3": "val3"}}]] |
      +-----------------------------------------------------------------------+

    Resulting arrays can be compared using JSON_ARRAY_INTERSECT():

    .. code-block::

      SET @json1='{"a":[1,2,3],"b":{"key1":"val1","key2":{"key3":"val3"}}}';
      SET @json2='{"a":[1,2,3]}';
      SELECT JSON_OBJECT_TO_ARRAY(@json1) into @array1;
      SELECT JSON_OBJECT_TO_ARRAY(@json2) into @array2;
      SELECT JSON_ARRAY_INTERSECT(@array1,@array2) as result;
      +--------------------+
      | result             |
      +--------------------+
      | [["a", [1, 2, 3]]] |
      +--------------------+

  * The new JSON function JSON_OBJECT_FILTER_KEYS(<json_doc>,<array_keys>) returns key/value pairs from a JSON string for keys defined in <array_keys>.

    Example:

    .. code-block::

      SET @json1= '{ "a": 1, "b": 2, "c": 3}';
      SELECT JSON_OBJECT_FILTER_KEYS (@json1, ' ["b", "c"] ') as result;
      +------------------+
      | result           |
      +------------------+
      | {"b": 2, "c": 3} |
      +------------------+

    By using JSON_ARRAY_INTERSECT() and JSON_KEY() as arguments for JSON_OBJECT_FILTER_KEYS(), a comparison of two JSON strings is possible where only the same keys are compared, not the key/value pairs.

    Example (only show key/value pairs of json1 where the key exists in json2):

    .. code-block::

      SET @json1= '{ "a": 1, "b": 2, "c": 3}';
      SET @json2= '{"b" : 10, "c": 20, "d": 30}';
      SELECT JSON_OBJECT_FILTER_KEYS (@json1, json_array_intersect(json_keys(@json1), json_keys(@json2))) as result;
      +------------------+
      | result           |
      +------------------+
      | {"b": 2, "c": 3} |
      +------------------+

* The new JSON function JSON_KEY_VALUE(<json_doc>,<json_path>) extracts key/value pairs from a JSON object. The JSON path parameter is used to only return key/value pairs for matching JSON objects. «ext-issue»«MENT-1896»

    Example:

    .. code-block::

      SELECT JSON_KEY_VALUE('[[1, {"key1":"val1", "key2":"val2"}, 3], 2, 3]', '$[0][1]');
      +-----------------------------------------------------------------------------+
      | JSON_KEY_VALUE('[[1, {"key1":"val1", "key2":"val2"}, 3], 2, 3]', '$[0][1]') |
      +-----------------------------------------------------------------------------+
      | [{"key": "key1", "value": "val1"}, {"key": "key2", "value": "val2"}]        |
      +-----------------------------------------------------------------------------+

    The function JSON_KEY_VALUE() can be used as an argument to JSON_TABLE(), which allows adding the key to a result set.

    Example:

    .. code-block::

      SELECT jt.* FROM JSON_TABLE(
      JSON_KEY_VALUE('[[1, {"key1":"val1", "key2":"val2"}, 3], 2, 3]', '$[0][1]'),'$[*]'
      COLUMNS (
      k VARCHAR(20) PATH '$.key',
      v VARCHAR(20) PATH '$.value',
      id FOR ORDINALITY )) AS jt;
      +------+------+------+
      | k    | v    | id   |
      +------+------+------+
      | key1 | val1 |    1 |
      | key2 | val2 |    2 |
      +------+------+------+

## Notable Changes
---

* It is now possible to unblock an account which reached the ``--max-password-errors`` limit by ``ALTER USER <user> ACCOUNT UNLOCK`` instead of executing a ``FLUSH PRIVILEGES`` command «ext-issue»«MDEV-34311»

  * Before this change ``ALTER USER <user> ACCOUNT UNLOCK`` only unlocked accounts which have been locked explicitly via ``ALTER USER <user> ACCOUNT LOCK``

  * ``FLUSH PRIVILEGES`` was the only way to reset account limit counters, like accounts blocked by reaching ``--max-password-errors``. Using ``FLUSH PRIVILEGES`` causes a full reload of the ACL tables, which can cause heavy disk reads

* A new global variable ``server_uid`` can be used to identify a server instance. This Server ID is also logged in the error log file on startup «ext-issue»«MDEV-34311»

* A new ``optimizer_join_limit_pref_ratio`` optimization had been added which allows to efficiently handle queries using ``JOIN`` and ``ORDER BY ... LIMIT`` construct. The new system variable ``optimizer_join_limit_pref_ratio`` is set to ``0`` by default for disabling the optimization. Set the value of ``optimizer_join_limit_pref_ratio`` to a non-zero value to enable this option (higher values are more conservative, recommended value is ``100``)

* Galera has been updated to ``26.4.19``

## Changes in Storage Engines
---

* This release incorporates MariaDB ColumnStore engine version 23.10.2.

.. _es-10-6-19-15-issues-fixed:

## Issues Fixed
---

### Can result in data loss
---

* An ALTER TABLE, OPTIMIZE TABLE, or REPAIR TABLE on an Aria table of ROW_FORMAT=PAGE (default) can fail or possibly corrupt the table, if the data file is bigger than 4GB. «ext-issue»«MDEV-34522»

* When executing an ALTER TABLE <table> CHECK PARTITION <partition> FOR UPGRADE on a table, which was created by the same server version, and therefore does not need an upgrade, a following ALTER TABLE for the same table will result in a server crash. «ext-issue»«MDEV-32155»

* When an InnoDB table using compressed row format is getting updated, the table can get corrupted «ext-issue»«MDEV-34357»

### Can result in hang or crash
---

* When using SHOW CREATE DATABASE statement crashes the server with a database name containing Unicode characters, the server can crash «ext-issue»«MDEV-32376»

* For a partitioned table of type SPIDER where the remote connection is configured via CREATE SERVER, the server can crash if the server definition was removed via DROP SERVER «ext-issue»«MDEV-31475»

* When multiple threads try to load spider and to create a spider table, MariaDB can crash «ext-issue»«MDEV-32487»

* When enabling the PAGE_COMPRESSED option for an InnoDB table created with INNODB_DEFAULT_ROW_FORMAT=redundant, the server crashes. «ext-issue»«MDEV-34222»

* A query that plans to use the Rowid Filter optimization could crash the server if some factor causes it to terminate abnormally at a certain specific point in query optimization. Examples of such causes of termination are: «ext-issue»«MDEV-30651»

  * Query being killed with KILL statement

  * Statement execution exceeding @@max_statement_time limit

* When running a query with HAVING NOT column clause where the "column" is also used in the GROUP BY {{ ... SELECT ... GROUP BY column ... HAVING NOT column}}, the server can crash.  Other forms of HAVING clause were not affected «ext-issue»«MDEV-19520»

* An Auto-generated DELETE statement is added to the binary log for MEMORY tables, which can break replication. The DELETE cannot be executed in cases like missing triggers, which results in the replication being stopped. «ext-issue»«MDEV-25607»

* Replication fails when XA transactions are used where the replica has replicate_do_db set and the client has touched a different database when running DML such as inserts «ext-issue»«MDEV-33921»

* Replication fails in chain configurations if an XA transaction is replicated which results in an empty transaction on a replica. The XA START through XA PREPARE first phase of the transaction is not binlogged, yet the XA COMMIT is binlogged, which results in errors due to executing standalone XA COMMIT queries on replicas further in the chain. «ext-issue»«MDEV-33921»

* The server can crash for a query with a HAVING clause such that: «ext-issue»«MDEV-32293» «ext-issue»«MDEV-32424» «ext-issue»«MDEV-32304» «ext-issue»«MDEV-29363»

1. It has several references to the same non-trivial constant (e.g., a subquery),

2. Condition pushdown optimization would try to move at least one of the references from HAVING clause into WHERE

* If a query used a derived table (a CTE or a mergeable VIEW would work as well) and the WHERE clause compared columns of the derived table with the value of CHARSET() or COERCIBILITY() function, the query could produce wrong result, or crash. The cause was incorrect processing of these functions by «ext-uri»«https://mariadb.com/kb/en/condition-pushdown-into-derived-table-optimization/»«derived condition pushdown optimization» «ext-issue»«MDEV-33010»

* With MariaDB Enterprise Custer a node can hang with the error: «ext-issue»«MDEV-31658»

  .. code-block:: text

    "Deadlock found when trying to get lock; try restarting transaction, Error_code: 1213; handler error HA_ERR_LOCK_DEADLOCK; the event's master log FIRST, end_log_pos 1583, Internal MariaDB error code: 1213"

### Can result in unexpected behavior
---

* Replicas only read the first 41 characters of MASTER_PASSWORD from the master.info file. This leads to an access denied error for a replica on a server restart, if the password is > 41 characters long. «ext-issue»«MDEV-23857»

* Adding a partition in a spider table can lead to memory violation «ext-issue»«MDEV-29027»

* MariaDB Server still can allow new connections to be created when the Server got a fatal signal «ext-issue»«MDEV-34475»

*  Slow warm-up for InnoDB as long as there are free pages in the buffer pool «ext-issue»«MDEV-34458»

  * An InnoDB warm-up is not needed when using innodb_buffer_pool_dump_at_shutdown=ON and innodb_buffer_pool_load_at_startup=ON

  * A slowdown at run time has not been observed

* Mariabackup stores the password into the tool_command setting in the file xtrabackup_info, if the password is provided as command-line option «ext-issue»«MDEV-34434»

* The semi-sync binlog fail-over recovery process uses rpl_semi_sync_slave_enabled==TRUE as its condition to truncate a primary server's binlog, as it is anticipating the server to re-join a replication topology as a replica. However, for servers configured with both rpl_semi_sync_master_enabled=1, and rpl_semi_sync_slave_enabled=1, if a primary is just re-started (i.e., retaining its role as master), it can truncate its binlog to drop transactions which its replica(s) has already received, and executed. «ext-issue»«MENT-2122»

  * If this happens, when the replica reconnects, its gtid_slave_pos can be ahead of the recovered primary's gtid_binlog_pos, resulting in an error state where the replica's state is ahead of the primary's.

  * Option --init-rpl-role will be used to define the initial role a server has. Possible options are MASTER and SLAVE, default MASTER . Setting it to SLAVE is now the condition for semi-sync recovery to truncate the binlog, This allows for both rpl_semi_sync_master_enabled, and rpl_semi_sync_slave_enabled to be set for a primary that is restarted, and no transactions will be lost, so long as --init-rpl-role is not set to SLAVE

* Grouping operators referring to column aliases in unions inside derived tables can cause name resolution problems with prepared statements. «ext-issue»«MDEV-34506»

* Table mysql.gtid_slave_pos is replicated between two MariaDB Enterprise Cluster although wsrep_gtid_mode=OFF is set. «ext-issue»«MDEV-34170»

* wsrep_sst_mariabackup is using /tmp dir during SST instead of an user defined tmpdir  «ext-issue»«MDEV-32158»

* The following misleading error message is shown with MariaDB Enterprise Cluster. Galera can mark user threads as high priority and so they can't be killed: «ext-issue»«MDEV-12008»

  .. code-block:: text

    You are not the owner of the thread ....

  * Now the following error message is shown:

    .. code-block:: text

      This is a high priority thread/query and cannot be killed without compromising the consistency of the cluster

* Executing an INSERT statement in PS mode having positional parameters bound with an array can result in an incorrect number of inserted rows in case there is a BEFORE INSERT trigger that executes yet another INSERT statement to put a copy of the row being inserted into some table. «ext-issue»«MDEV-24411»

* When using the asynchronous replication between two MariaDB Enterprise Cluster (Galera) environments, the domain id of the GTID can be wrongly set, or changed by Galera «ext-issue»«MDEV-32633»

### Related to performance
---

* Performance improvements for queries using a secondary indexes. «ext-issue»«MENT-2126»

* Slower query performance on some Linux systems because of a performance difference of the system call ftruncate'() to truncate data files, as ftruncate() causes a flush. MariaDB used "ftruncate" to periodically empty its temporary tables. Query plans with Split Materialized optimization are affected the most. «ext-issue»«MENT-2125»

* Using NAME_CONST(), or executing query from the stored procedure and referring to a local variable, changes the plan, and may make execution slower «ext-issue»«MDEV-33971»

* ``ALTER TABLE ... IMPORT TABLESPACE`` can take unnecessarily long if a database uses a large number of tablespaces and and the value inndb_open_files is lower than the number of existing table_spaces «ext-issue»«MDEV-34670»

* Rowid Filter optimization cannot work with backward index scans. An attempt to run such a query plan will make the query perform very slowly. Fixed by disabling use of Rowid Filter if the optimizer decides to use a backward index scan. «ext-issue»«MDEV-33875»

## Changelog
---

For the complete list of changes in this release, see the «slug»«changelog-es-10.6.19-15»«changelog».

## Platforms
---

In alignment to the «slug»«enterprise-server-lifecycle»«enterprise lifecycle», MariaDB Enterprise Server <%VER%> is provided for:

* AlmaLinux 8 (x86_64, ARM64)

* AlmaLinux 9 (x86_64, ARM64)

* Debian 11 (x86_64, ARM64)

* Debian 12 (x86_64, ARM64)

* Microsoft Windows (x86_64) (MariaDB Enterprise Cluster excluded)

* Red Hat Enterprise Linux 8 (x86_64, ARM64)

* Red Hat Enterprise Linux 9 (x86_64, ARM64, PPC64LE)

* Rocky Linux 8 (x86_64, ARM64)

* Rocky Linux 9 (x86_64, ARM64)

* SUSE Linux Enterprise Server 12 (x86_64)

* SUSE Linux Enterprise Server 15 (x86_64, ARM64)

* Ubuntu 20.04 (x86_64, ARM64)

* Ubuntu 22.04 (x86_64, ARM64)

* Ubuntu 24.04 (x86_64, ARM64)

Some components of MariaDB Enterprise Server might not support all platforms. For additional information, see "«ext-uri»«https://mariadb.com/engineering-policies/»«MariaDB Corporation Engineering Policies»".

.. include:: ~/enterprise-server/release-notes-tail-links-10-6.inc

